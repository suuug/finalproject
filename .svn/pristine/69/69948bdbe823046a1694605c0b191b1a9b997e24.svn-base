package kr.or.workTogether.project.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.workTogether.common.vo.EmployeeVO;
import kr.or.workTogether.common.vo.ProjWorkVO;
import kr.or.workTogether.common.vo.ProjectVO;
import kr.or.workTogether.project.service.ProjectService;

@Controller
@RequestMapping("/project")
public class ProjectController {
	Logger logger = LoggerFactory.getLogger(ProjectController.class);
	
	@Autowired
	ProjectService projectService;
	
	@GetMapping("")
	public String main(Model model, @ModelAttribute ProjectVO projectVO, HttpSession session) {
		String empId = "EMPL00004";
		session.setAttribute("empId", empId);
		
		List<ProjectVO> projList = projectService.projList(empId);
		Map<String, Object> map = new HashMap<>();
		
		map.put("empId", empId);
		map.put("division", "give");
		List<ProjWorkVO> giveWorkList = projectService.workHomeList(map);
		map.remove("division");
		map.put("division", "get");
		List<ProjWorkVO> getWorkList = projectService.workHomeList(map);
		map.remove("division");
		map.put("issue", "issue");
		List<ProjWorkVO> issueWorkList = projectService.workHomeList(map);

		model.addAttribute("list", projList);
		model.addAttribute("giveWorkList", giveWorkList);
		model.addAttribute("getWorkList", getWorkList);
		model.addAttribute("issueWorkList", issueWorkList);
		
		// forwarding
		return "project/main";
	}
	
	@PostMapping("/projInsert")
	public String projInsert(ProjectVO projectVO) {
		logger.info(projectVO.toString());
		
		
		
		return "project/main";
	}

	@GetMapping("/home")
	public String home(Model model
			, @RequestParam String projId
			, @ModelAttribute ProjWorkVO projWorkVO
			, HttpSession session) {
//		logger.info(projId);
		
		Map<String, Object> map = new HashMap<>();
		map.put("projId", projId);
		map.put("empId", "EMPL00004");
		
		ProjectVO projVO = projectService.projDetail(projId);
		List<EmployeeVO> memberList = projectService.memberList(projId);
		List<ProjWorkVO> workList = projectService.workList(map);
		
//		logger.info("home() projVO : "+projVO.toString());
//		logger.info("home() memberList : "+memberList.toString());
//		logger.info("home() workList : "+workList.toString());

		
		session.setAttribute("projId", projId);
		session.setAttribute("projName", projVO.getProjName());
		
		model.addAttribute("memlist", memberList);
		model.addAttribute("workList", workList);
		model.addAttribute("projVO", projVO);
		
		// forwarding
		return "project/home";
	}
	
	@GetMapping("/work")
	public String work(Model model
			, @ModelAttribute ProjWorkVO projWorkVO
			, @RequestParam(required=false) String projId) {

		List<EmployeeVO> memberList = projectService.memberList(projId);

		model.addAttribute("list", memberList);

		return "project/work";
	}
	
	@GetMapping("/calendar")
	public String calendar(Model model
			, @ModelAttribute ProjWorkVO projWorkVO) {

		
		return "project/calendar";
	}
	
	@GetMapping("/ganttchart")
	public String ganttchart(Model model
			, @ModelAttribute ProjWorkVO projWorkVO) {
		

		
		return "project/ganttchart";
	}
	
	@PostMapping("/workList")
	@ResponseBody
	public List<ProjWorkVO> workSelect(Model model
			,@ModelAttribute ProjWorkVO projWorkVO
			,@RequestBody Map<String, Object> map){
		
		logger.info("map" + map);
		
		
		logger.info("select");
		logger.info(projWorkVO.toString());
		logger.info(map.get("projId") + " " + map.get("division") + " " + map.get("empId") );
		logger.info(map.get("wkStateList").toString());
		logger.info(map.get("priorityList").toString());

		
		List<ProjWorkVO> workList = projectService.workList(map);
		
		logger.info("workList : " + workList.size());
		
		model.addAttribute("workList", workList);
		
		return workList;
		
	}
	
	@PostMapping("/insertWork")
	public String insertWork(Model model, ProjWorkVO projWorkVO, BindingResult result ) {
		logger.info("insertWork() : " + projWorkVO.toString());
		
		int insertWork = projectService.insertWork(projWorkVO);
		
		if(insertWork > 0) {
			return "redirect:/project/work";
		}
		
		return "project/work";
	}
	
	@PostMapping("/updateWork")
	public String updateWork(Model model, ProjWorkVO projWorkVO, BindingResult result ) {
		logger.info("updateWork() : " + projWorkVO.toString());
		
		int updateWork = projectService.updateWork(projWorkVO);
		
		if(updateWork > 0) {
			return "redirect:/project/work";
		}
		
		return "project/work";
	}
	
	@PostMapping("/workDetail")
	@ResponseBody
	public ProjWorkVO workDetail(String workId) {
		logger.info("workDetail");
		logger.info(workId);
		
		return projectService.worktDetail(workId);
	}
}
